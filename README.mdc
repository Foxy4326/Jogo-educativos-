<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jogos Educativos - Plataforma Completa</title>
    <style>
        /* ... (todo o CSS anterior permanece igual) ... */

        /* NOVO: Sistema de Mapa de Moedas */
        .coin-map-btn {
            position: fixed;
            bottom: 140px;
            right: 20px;
            background: linear-gradient(135deg, #ffd700, #ffed4e);
            color: #333;
            border: none;
            padding: 15px 20px;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            font-size: 1.1rem;
            box-shadow: 0 10px 30px rgba(255, 215, 0, 0.3);
            z-index: 1000;
            display: none;
            transition: all 0.3s ease;
        }

        .coin-map-btn:hover {
            transform: scale(1.05);
        }

        .coin-map-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 2000;
            justify-content: center;
            align-items: center;
        }

        .coin-map-content {
            background: white;
            border-radius: 25px;
            padding: 30px;
            max-width: 800px;
            width: 90%;
            max-height: 85vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
        }

        .coin-map-canvas {
            width: 100%;
            height: 500px;
            background: linear-gradient(135deg, #87CEEB, #98FB98);
            border-radius: 15px;
            position: relative;
            overflow: hidden;
            margin-bottom: 20px;
            border: 3px solid #ffd700;
        }

        .coin-map-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .coin-map-stat {
            background: linear-gradient(135deg, #ffd700, #ffed4e);
            color: #333;
            padding: 15px;
            border-radius: 15px;
            text-align: center;
            font-weight: bold;
        }

        .coin-element {
            position: absolute;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ffd700, #ffed4e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.5);
            transition: all 0.3s ease;
            animation: float3d 2s infinite ease-in-out;
        }

        .coin-element:hover {
            transform: scale(1.2);
            animation-play-state: paused;
        }

        .coin-element.collected {
            opacity: 0.3;
            transform: scale(0.8);
            cursor: default;
        }

        .map-area {
            position: absolute;
            border: 2px dashed rgba(255, 215, 0, 0.5);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .map-area:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: #ffd700;
        }

        .map-area-label {
            position: absolute;
            bottom: -25px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 10px;
            font-size: 0.8rem;
            white-space: nowrap;
        }

        .map-reset-btn {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 15px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <!-- ... (todo o HTML anterior permanece igual) ... -->

    <!-- NOVO: Bot√£o do Mapa de Moedas -->
    <button id="coin-map-btn" class="coin-map-btn" onclick="abrirMapaMoedas()">
        üó∫Ô∏è Mapa de Moedas
    </button>

    <!-- ... (restante do HTML anterior) ... -->

    <!-- NOVO: Modal do Mapa de Moedas -->
    <div id="coin-map-modal" class="coin-map-modal">
        <div class="coin-map-content">
            <button class="close-button" onclick="fecharMapaMoedas()">&times;</button>
            <h2 style="text-align: center; margin-bottom: 20px; color: #4a5568;">üó∫Ô∏è Mapa de Moedas</h2>
            
            <div class="coin-map-stats">
                <div class="coin-map-stat">
                    <div style="font-size: 1.5rem;" id="map-coins-total">0</div>
                    <div style="font-size: 0.9rem;">Moedas Coletadas</div>
                </div>
                <div class="coin-map-stat">
                    <div style="font-size: 1.5rem;" id="map-coins-available">0</div>
                    <div style="font-size: 0.9rem;">Dispon√≠veis Hoje</div>
                </div>
                <div class="coin-map-stat">
                    <div style="font-size: 1.5rem;" id="map-streak">0</div>
                    <div style="font-size: 0.9rem;">Dias Consecutivos</div>
                </div>
            </div>

            <div class="coin-map-canvas" id="coin-map-canvas">
                <!-- √Åreas do mapa ser√£o geradas dinamicamente -->
            </div>

            <div style="text-align: center;">
                <button onclick="coletarTodasMoedas()" class="control-btn" style="background: linear-gradient(135deg, #48bb78, #38a169);">
                    üéØ Coletar Todas as Moedas
                </button>
                <button onclick="resetarMapaMoedas()" class="map-reset-btn">
                    üîÑ Resetar Mapa
                </button>
            </div>

            <div style="background: #f7fafc; padding: 15px; border-radius: 10px; margin-top: 20px;">
                <h4 style="margin: 0 0 10px 0; color: #4a5568;">üí° Dicas do Mapa:</h4>
                <ul style="margin: 0; padding-left: 20px; color: #666; font-size: 0.9rem;">
                    <li>Clique nas moedas douradas para colet√°-las</li>
                    <li>Novas moedas aparecem a cada 24 horas</li>
                    <li>Colete moedas consecutivas para ganhar b√¥nus</li>
                    <li>Explore todas as √°reas do mapa</li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        // NOVO: Sistema de Mapa de Moedas
        class SistemaMapaMoedas {
            constructor() {
                this.moedasColetadas = JSON.parse(localStorage.getItem(`${usuarioLogado}-map-coins`) || '[]');
                this.ultimaColeta = localStorage.getItem(`${usuarioLogado}-last-map-collection`) || '';
                this.sequenciaDias = parseInt(localStorage.getItem(`${usuarioLogado}-map-streak`) || '0');
                this.areas = [
                    { id: 'floresta', nome: 'üå≥ Floresta Encantada', top: '10%', left: '10%', width: '25%', height: '30%' },
                    { id: 'montanha', nome: '‚õ∞Ô∏è Montanha Misteriosa', top: '10%', left: '65%', width: '25%', height: '30%' },
                    { id: 'oceano', nome: 'üåä Oceano Profundo', top: '50%', left: '10%', width: '25%', height: '30%' },
                    { id: 'deserto', nome: 'üèúÔ∏è Deserto Dourado', top: '50%', left: '65%', width: '25%', height: '30%' },
                    { id: 'vulcao', nome: 'üåã Vulc√£o Flamejante', top: '30%', left: '37.5%', width: '25%', height: '30%' }
                ];
                this.verificarResetDiario();
                this.atualizarDisplay();
            }

            verificarResetDiario() {
                const hoje = new Date().toDateString();
                if (this.ultimaColeta !== hoje) {
                    // Novo dia - resetar moedas coletadas
                    this.moedasColetadas = [];
                    this.ultimaColeta = hoje;
                    
                    // Verificar se √© sequ√™ncia
                    const ontem = new Date();
                    ontem.setDate(ontem.getDate() - 1);
                    if (this.ultimaColeta === ontem.toDateString()) {
                        this.sequenciaDias++;
                    } else {
                        this.sequenciaDias = 1;
                    }
                    
                    this.salvar();
                }
            }

            gerarMoedas() {
                const moedas = [];
                this.areas.forEach(area => {
                    // Gerar 3-5 moedas por √°rea
                    const quantidade = Math.floor(Math.random() * 3) + 3;
                    for (let i = 0; i < quantidade; i++) {
                        moedas.push({
                            id: `${area.id}-${i}`,
                            area: area.id,
                            top: `${Math.random() * 80 + 10}%`,
                            left: `${Math.random() * 80 + 10}%`,
                            valor: Math.floor(Math.random() * 5) + 1 // 1-5 moedas
                        });
                    }
                });
                return moedas;
            }

            coletarMoeda(moedaId) {
                if (this.moedasColetadas.includes(moedaId)) {
                    return false; // J√° coletada
                }

                this.moedasColetadas.push(moedaId);
                const moeda = this.obterMoedaPorId(moedaId);
                
                if (moeda && sistemaMonetario) {
                    // B√¥nus de sequ√™ncia
                    const bonusSequencia = Math.floor(this.sequenciaDias / 3);
                    const valorFinal = moeda.valor + bonusSequencia;
                    
                    sistemaMonetario.adicionarMoedas(valorFinal, 'coleta no mapa');
                    
                    let mensagem = `üí∞ +${valorFinal} moedas coletadas!`;
                    if (bonusSequencia > 0) {
                        mensagem += ` (+${bonusSequencia} b√¥nus de sequ√™ncia)`;
                    }
                    
                    criarNotificacao(mensagem, 'success');
                }

                this.salvar();
                this.atualizarDisplay();
                return true;
            }

            obterMoedaPorId(id) {
                const todasMoedas = this.gerarMoedas();
                return todasMoedas.find(moeda => moeda.id === id);
            }

            coletarTodasMoedas() {
                const todasMoedas = this.gerarMoedas();
                let totalColetado = 0;
                let novasColetas = 0;

                todasMoedas.forEach(moeda => {
                    if (!this.moedasColetadas.includes(moeda.id)) {
                        this.moedasColetadas.push(moeda.id);
                        totalColetado += moeda.valor;
                        novasColetas++;
                    }
                });

                if (novasColetas > 0 && sistemaMonetario) {
                    // B√¥nus por coleta em massa
                    const bonusMassa = Math.floor(novasColetas / 2);
                    const valorFinal = totalColetado + bonusMassa;
                    
                    sistemaMonetario.adicionarMoedas(valorFinal, 'coleta em massa no mapa');
                    
                    let mensagem = `üéØ ${novasColetas} moedas coletadas! Total: +${valorFinal} moedas`;
                    if (bonusMassa > 0) {
                        mensagem += ` (+${bonusMassa} b√¥nus)`;
                    }
                    
                    criarNotificacao(mensagem, 'success');
                    this.salvar();
                    this.atualizarDisplay();
                } else {
                    criarNotificacao('‚ùå Todas as moedas j√° foram coletadas hoje!', 'error');
                }
            }

            resetarMapa() {
                if (confirm('‚ö†Ô∏è Resetar todas as moedas do mapa? Isso n√£o afeta as moedas j√° ganhas.')) {
                    this.moedasColetadas = [];
                    this.salvar();
                    this.atualizarDisplay();
                    criarNotificacao('üó∫Ô∏è Mapa resetado com sucesso!', 'success');
                }
            }

            salvar() {
                localStorage.setItem(`${usuarioLogado}-map-coins`, JSON.stringify(this.moedasColetadas));
                localStorage.setItem(`${usuarioLogado}-last-map-collection`, this.ultimaColeta);
                localStorage.setItem(`${usuarioLogado}-map-streak`, this.sequenciaDias.toString());
            }

            atualizarDisplay() {
                document.getElementById('map-coins-total').textContent = this.moedasColetadas.length;
                document.getElementById('map-coins-available').textContent = this.gerarMoedas().length - this.moedasColetadas.length;
                document.getElementById('map-streak').textContent = this.sequenciaDias;
            }

            renderizarMapa() {
                const canvas = document.getElementById('coin-map-canvas');
                if (!canvas) return;

                // Limpar canvas
                canvas.innerHTML = '';

                // Adicionar √°reas
                this.areas.forEach(area => {
                    const areaElement = document.createElement('div');
                    areaElement.className = 'map-area';
                    areaElement.style.cssText = `
                        top: ${area.top};
                        left: ${area.left};
                        width: ${area.width};
                        height: ${area.height};
                    `;
                    
                    const label = document.createElement('div');
                    label.className = 'map-area-label';
                    label.textContent = area.nome;
                    areaElement.appendChild(label);
                    
                    canvas.appendChild(areaElement);
                });

                // Adicionar moedas
                const moedas = this.gerarMoedas();
                moedas.forEach(moeda => {
                    const jaColetada = this.moedasColetadas.includes(moeda.id);
                    const coinElement = document.createElement('div');
                    coinElement.className = `coin-element ${jaColetada ? 'collected' : ''}`;
                    coinElement.style.cssText = `
                        top: ${moeda.top};
                        left: ${moeda.left};
                        background: ${jaColetada ? 
                            'linear-gradient(135deg, #ccc, #999)' : 
                            'linear-gradient(135deg, #ffd700, #ffed4e)'};
                        cursor: ${jaColetada ? 'default' : 'pointer'};
                    `;
                    coinElement.innerHTML = jaColetada ? '‚úÖ' : 'üí∞';
                    coinElement.title = jaColetada ? 
                        'Moeda j√° coletada' : 
                        `Clique para coletar ${moeda.valor} moeda(s)`;

                    if (!jaColetada) {
                        coinElement.onclick = () => {
                            if (this.coletarMoeda(moeda.id)) {
                                coinElement.className = 'coin-element collected';
                                coinElement.innerHTML = '‚úÖ';
                                coinElement.style.background = 'linear-gradient(135deg, #ccc, #999)';
                                coinElement.title = 'Moeda j√° coletada';
                                coinElement.style.cursor = 'default';
                                
                                // Efeito visual
                                coinElement.style.animation = 'pulse3d 0.5s ease-out';
                            }
                        };
                    }

                    canvas.appendChild(coinElement);
                });

                this.atualizarDisplay();
            }
        }

        // Vari√°vel global do sistema de mapa de moedas
        let sistemaMapaMoedas = null;

        // NOVO: Fun√ß√µes do Mapa de Moedas
        function abrirMapaMoedas() {
            if (!usuarioLogado) {
                criarNotificacao('‚ùå Fa√ßa login para acessar o mapa!', 'error');
                mostrarLogin();
                return;
            }

            document.getElementById('coin-map-modal').style.display = 'flex';
            if (sistemaMapaMoedas) {
                sistemaMapaMoedas.renderizarMapa();
            }
        }

        function fecharMapaMoedas() {
            document.getElementById('coin-map-modal').style.display = 'none';
        }

        function coletarTodasMoedas() {
            if (sistemaMapaMoedas) {
                sistemaMapaMoedas.coletarTodasMoedas();
                sistemaMapaMoedas.renderizarMapa();
            }
        }

        function resetarMapaMoedas() {
            if (sistemaMapaMoedas) {
                sistemaMapaMoedas.resetarMapa();
                sistemaMapaMoedas.renderizarMapa();
            }
        }

        // ATUALIZA√á√ÉO: Inicializar sistemaMapaMoedas no login
        function fazerLogin() {
            const usuario = document.getElementById('login-usuario').value.trim();
            const senha = document.getElementById('login-senha').value;

            if (!usuario || !senha) {
                criarNotificacao('‚ùå Preencha usu√°rio e senha!', 'error');
                return;
            }

            const usuariosExistentes = JSON.parse(localStorage.getItem('usuarios') || '{}');
            
            if (usuariosExistentes[usuario] && usuariosExistentes[usuario].senha === senha) {
                usuarioLogado = usuario;
                const dadosUsuario = usuariosExistentes[usuario];
                
                document.getElementById('user-name').textContent = usuario;
                mostrarBadgesUsuario(dadosUsuario);
                
                if (dadosUsuario.isAdmin) {
                    document.getElementById('admin-panel-btn').style.display = 'block';
                }
                
                document.getElementById('login-section').style.display = 'none';
                document.getElementById('user-section').style.display = 'block';
                fecharLogin();
                
                // Inicializar sistemas (ATUALIZADO)
                sistemaPontuacao = new SistemaPontuacao();
                sistemaMonetario = new SistemaMonetario();
                sistemaPlanos = new SistemaPlanos();
                sistemaMapaMoedas = new SistemaMapaMoedas(); // NOVO
                
                // Mostrar elementos (ATUALIZADO)
                document.getElementById('currency-display').style.display = 'block';
                document.getElementById('shop-btn').style.display = 'block';
                document.getElementById('plans-btn').style.display = 'block';
                document.getElementById('coin-map-btn').style.display = 'block'; // NOVO
                
                let mensagem = `üéâ Bem-vindo de volta, ${usuario}!`;
                if (dadosUsuario.isOwner) {
                    mensagem = `üëë Bem-vindo de volta, Dono ${usuario}!`;
                } else if (dadosUsuario.isProfessora) {
                    mensagem = `üë©‚Äçüè´ Bem-vinda de volta, Professora ${usuario}!`;
                } else if (dadosUsuario.isAdmin) {
                    mensagem = `‚ö° Bem-vindo de volta, Admin ${usuario}!`;
                }
                
                criarNotificacao(mensagem, 'success');
                
                setTimeout(() => {
                    if (sistemaSaudacoes) {
                        const saudacaoPersonalizada = sistemaSaudacoes.obterSaudacaoPersonalizada();
                        criarNotificacao(saudacaoPersonalizada, 'success');
                    }
                }, 2000);
            } else {
                criarNotificacao('‚ùå Usu√°rio ou senha incorretos!', 'error');
            }
        }

        // ATUALIZA√á√ÉO: Inicializa√ß√£o ao carregar a p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            sistemaSaudacoes = new SistemaSaudacoes();
            verificarTokenRecuperacaoURL();
            
            const usuarioSalvo = localStorage.getItem('usuarioLogado');
            if (usuarioSalvo) {
                const usuarios = JSON.parse(localStorage.getItem('usuarios') || '{}');
                if (usuarios[usuarioSalvo]) {
                    usuarioLogado = usuarioSalvo;
                    document.getElementById('user-name').textContent = usuarioSalvo;
                    document.getElementById('login-section').style.display = 'none';
                    document.getElementById('user-section').style.display = 'block';
                    
                    mostrarBadgesUsuario(usuarios[usuarioSalvo]);
                    
                    if (usuarios[usuarioSalvo].isAdmin) {
                        document.getElementById('admin-panel-btn').style.display = 'block';
                    }
                    
                    // Inicializar sistemas (ATUALIZADO)
                    sistemaPontuacao = new SistemaPontuacao();
                    sistemaMonetario = new SistemaMonetario();
                    sistemaPlanos = new SistemaPlanos();
                    sistemaMapaMoedas = new SistemaMapaMoedas(); // NOVO
                    
                    // Mostrar elementos (ATUALIZADO)
                    document.getElementById('currency-display').style.display = 'block';
                    document.getElementById('shop-btn').style.display = 'block';
                    document.getElementById('plans-btn').style.display = 'block';
                    document.getElementById('coin-map-btn').style.display = 'block'; // NOVO
                    
                    setTimeout(() => {
                        if (sistemaSaudacoes) {
                            const saudacaoPersonalizada = sistemaSaudacoes.obterSaudacaoPersonalizada();
                            criarNotificacao(saudacaoPersonalizada, 'success');
                        }
                    }, 1000);
                }
            }
        });

        // ... (restante do c√≥digo JavaScript anterior permanece igual) ...
    </script>
</body>
</html>
